data(ToothGrowth)
summary(ToothGrowth)
str(ToothGrowth)
require(graphics)
coplot(len ~ dose | supp, data = ToothGrowth, panel = panel.smooth,
xlab = "ToothGrowth data: length vs dose, given type of supplement")
g <- ggplot(ToothGrowth, aes(supp,len))
g + geom_boxplot()
library(ggplot2)
g <- ggplot(ToothGrowth, aes(supp,len))
g + geom_boxplot()
g1 <- ggplot(ToothGrowth, aes(supp,len))
g1 + geom_boxplot(fill = factor(supp), theme_bw())
g1 + geom_boxplot(fill = factor(ToothGrowth$supp), theme_bw())
g1 + geom_boxplot(aes(fill = factor(supp)), theme_bw())
g1 + geom_boxplot(aes(fill = factor(supp))) + theme_bw()
g1 + geom_boxplot(aes(fill = factor(supp)), alpha = 0.7) + theme_bw()
g <- ggplot(ToothGrowth, aes(supp,len))
g + geom_point(aes(col = factor(supp)), size = 4, alpha = 0.5)
g + geom_point(aes(col = factor(supp)), size = 4, alpha = 0.5) + theme_bw() + geom_boxplot(aes(fill = factor(supp)), alpha = 0.7) + theme_bw()
g + geom_point(aes(col = factor(supp)), size = 4, alpha = 0.8) + theme_bw() + geom_boxplot(aes(fill = factor(supp)), alpha = 0.5)
g + geom_point(aes(col = factor(dose)), size = 4, alpha = 0.8) + theme_bw() + geom_boxplot(aes(fill = factor(supp)), alpha = 0.5)
g + geom_point(aes(col = factor(dose)), size = 4, alpha = 0.9) + theme_bw() + geom_boxplot(aes(fill = factor(supp)), alpha = 0.5)
g + theme_bw() + geom_boxplot(aes(fill = factor(supp)), alpha = 0.5) + geom_point(aes(col = factor(dose)), size = 4, alpha = 0.9)
g + theme_bw() + geom_boxplot(aes(fill = factor(supp)), alpha = 0.5) + geom_point(aes(col = factor(dose)), size = 4, alpha = 0.7)
Dose <- factor(ToothGrowth$dose)
Supplement <- factor(ToogthGrowth$supp)
g <- ggplot(ToothGrowth, aes(supp,len))
g + theme_bw() + geom_boxplot(aes(fill = facto(Supp)), alpha = 0.5) + geom_point(aes(col = factor(Dose)), size = 4, alpha = 0.7)
g <- ggplot(ToothGrowth, aes(supp,len))
g + theme_bw() + geom_boxplot(aes(fill = factor(Supp)), alpha = 0.5) + geom_point(aes(col = factor(Dose)), size = 4, alpha = 0.7)
g + theme_bw() + geom_boxplot(aes(fill = factor(Supplement)), alpha = 0.5) + geom_point(aes(col = factor(Dose)), size = 4, alpha = 0.7)
Dose <- factor(ToothGrowth$dose)
Supplement <- factor(ToogthGrowth$supp)
g <- ggplot(ToothGrowth, aes(supp,len))
g + theme_bw() + geom_boxplot(aes(fill = Supplement), alpha = 0.5) + geom_point(aes(col = Dose), size = 4, alpha = 0.7)
Supplement <- factor(ToogthGrowth$supp)
Dose <- factor(ToothGrowth$dose)
Supplement <- factor(ToothGrowth$supp)
g <- ggplot(ToothGrowth, aes(supp,len))
g + theme_bw() + geom_boxplot(aes(fill = Supplement), alpha = 0.5) + geom_point(aes(col = Dose), size = 4, alpha = 0.7)
g <- ggplot(ToothGrowth, aes(dose,len))
g + theme_bw() + geom_boxplot(aes(fill = Dose), alpha = 0.5) + geom_point(aes(col = Supplement), size = 4, alpha = 0.7)
par(mfcol = c(1,2))
Dose <- factor(ToothGrowth$dose)
Supplement <- factor(ToothGrowth$supp)
g <- ggplot(ToothGrowth, aes(supp,len))
g + theme_bw() + geom_boxplot(aes(fill = Supplement), alpha = 0.5) + geom_point(aes(col = Dose), size = 4, alpha = 0.7)
g <- ggplot(ToothGrowth, aes(dose,len))
g + theme_bw() + geom_boxplot(aes(fill = Dose), alpha = 0.5) + geom_point(aes(col = Supplement), size = 4, alpha = 0.7)
par(mfcol = c(1,2))
g <- ggplot(ToothGrowth, aes(supp,len))
g + theme_bw() + geom_boxplot(aes(fill = Supplement), alpha = 0.5) + geom_point(aes(col = Dose), size = 4, alpha = 0.7)
mean(ToothGrowth$len, ToothGrowth$supp = "VC")
mean(ToothGrowth$len, ToothGrowth$supp == "VC")
summary(ToothGrowth$len)
mean(ToothGrowth$len)
mean(subset(ToothGrowth$len, ToothGrowth$supp == "VC"))
install.packages('knitr', dependencies = TRUE)
install.packages("knitr", dependencies = TRUE)
mean(subset(ToothGrowth$len, ToothGrowth$supp == "VC", ToothGrowth$dose == 0.5))
subset(ToothGrowth$len, ToothGrowth$supp == "VC", ToothGrowth$dose == 0.5)
ToothGrowth$dose
require(graphics)
coplot(len ~ dose | supp, data = ToothGrowth, panel = panel.smooth,
xlab = "ToothGrowth data: length vs dose, given type of supplement")
group_OJ_0.5 <- subset(ToothGrowth$len, ToothGrowth$supp == "OJ" & ToothGrowth$dose == 0.5)
group_VC_0.5 <- subset(ToothGrowth$len, ToothGrowth$supp == "VC"& ToothGrowth$dose == 0.5)
group_OJ_1 <- subset(ToothGrowth$len, ToothGrowth$supp == "OJ" & ToothGrowth$dose == 1)
group_VC_1 <- subset(ToothGrowth$len, ToothGrowth$supp == "VC"& ToothGrowth$dose == 1)
group_OJ_2 <- subset(ToothGrowth$len, ToothGrowth$supp == "OJ" & ToothGrowth$dose == 2)
group_VC_2 <- subset(ToothGrowth$len, ToothGrowth$supp == "VC"& ToothGrowth$dose == 2)
t.test(group_OJ_0.5, group_VC_0.5, paired = F, var.equal = F)$conf
t.test(group_OJ_0.5, group_VC_0.5, paired = F, var.equal = F)$p
t.test(group_OJ_0.5, group_VC_0.5, paired = F, var.equal = F)$
t.test(group_OJ_0.5, group_VC_0.5, paired = F, var.equal = F)
test_0.5 <- t.test(group_OJ_0.5, group_VC_0.5, paired = F, var.equal = F)
test_0.5$p-value
test_0.5 <- t.test(group_OJ_0.5, group_VC_0.5, paired = F, var.equal = F)
test_1 <- t.test(group_OJ_1, group_VC_2, paired = F, var.equal = F)
test_2 <- t.test(group_OJ_2, group_VC_2, paired = F, var.equal = F)
ggQQ <- function(LM) # argument: a linear model
{
y <- quantile(rstandard(LM), c(0.25, 0.75))
x <- qnorm(c(0.25, 0.75))
slope <- diff(y)/diff(x)
int <- y[1L] - slope * x[1L]
p <- ggplot(LM, aes(sample = rstandard(LM))) +
stat_qq(aes(alpha = 0.8, color="#F8766D", size = 2)) + theme_bw() +
theme(legend.position="none") +
geom_abline(slope = slope, intercept = int, color="#F8766D", linetype = "dashed") +
xlab("Theoretical Quantile") + ylab("Standard Residual")
return(p)
}
data(mtcars)
fit1 <- lm(mpg ~ wt * am, data = mtcars)
ggQQ(fit1)
library(ggplot2)
ggQQ(fit1)
ggQQ(LM = fit1)
LM <- fit1
ggQQ(LM)
title(main = list("Figure 1: Normal Q-Q for Model 1", cex = 1), sub = fit1$call, line = 3)
ggQQ(LM) + ggtitle(main = list("Figure 1: Normal Q-Q for Model 1", cex = 1), sub = fit1$call, line = 3)
ggQQ(fit1)
plotmatrix(mtcars[, c(1,2,4,6,9)])
require("GGally")
require(GGally)
install.packages("GGally")
library(GGally)
ggpairs(mtcars[, c(1,2,4,6,9)])
df <- read.csv(file = "D:/cebu/locationupdate.csv", nrows = 100, header = T)
View(df)
df <- read.csv(file = "D:/cebu/account.csv", nrows = 100, header = T)
View(df)
df <- read.csv(file = "D:/cebu/account.csv", nrows = 100, header = T)
View(df)
df <- read.csv(file = "D:/cebu/locationupdate.csv", nrows = 100, header = T)
View(df)
df <- read.csv(file = "D:/cebu/locationupdate.csv", nrows = 100, header = T, dec = " ")
View(df)
df <- read.csv(file = "D:/cebu/locationupdate.csv", nrows = 100, header = T, dec = ",")
View(df)
df <- read.csv(file = "D:/cebu/locationupdate.csv", nrows = 100, header = T, sep = " ")
View(ToothGrowth)
View(df)
df <- read.csv(file = "D:/cebu/locationupdate.csv", nrows = 100, header = F, sep = " ")
df <- read.csv(file = "D:/cebu/locationupdate.csv", nrows = 100, header = F, sep = ",")
df <- read.csv(file = "D:/cebu/locationupdate.csv", nrows = 100, header = F, sep = ";")
df <- read.csv(file = "D:/cebu/locationupdate.csv", nrows = 100, header = F, sep = " ")
df <- read.csv(file = "D:/cebu/account.csv", nrows = 100, header = T, sep = ";")
View(df)
df <- read.csv(file = "D:/cebu/locationupdate.csv", nrows = 100, header = F, sep = ";")
View(df)
df <- read.csv(file = "D:/cebu/locationupdate.csv", nrows = 100, header = T, sep = ";")
View(df)
data(InsectSprays)
fit <- glm(count ~ spray, data = InsectSprays, family = poisson)
fit2 <- glm(count ~ I(1 * (spray == 'A')) + I(1 * (spray == 'B')), data = InsectSprays, family = poisson)
summary(fit)$coef
summary(fit2)$coef
exp(fit2$coefp[2]-fit2$coef[3])
exp(fit2$coefp[2]-fit2$coef[3])
fit2$coefp[2]-fit2$coef[3]
exp(fit2$coef[2]-fit2$coef[3])
data(shuttle)
library(MASS)
data(shuttle)
fit3 <- glm(use~wind, data = shuttle, family = binomial)
summary(fit)$coef
summary(fit3)$coef
fit4 <- glm(use~wind+magn, data = shuttle, family = binomial)
summary(fit4)coef
summary(fit4)$coef
exp(-0.031)
fit5 <- glm(use~wind*magn, data = shuttle, family = binomial)
summary(fit5)$coef
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knot <- sep(0, length(x))
knot <- seq(0, length(x))
knot
knot <- rep(0, length(x))
knot <- 0
sT <- sapply(knot, function(k) (x>k)*(x-k))
View(sT)
xM <- cbind(1,x, sT)
fit6 <- lm(y ~ xM)
summary(fit6)$coef
View(sT)
xm
View(xM)
fit6 <- lm(y ~ xM-1)
summary(fit6)$coef
plot(x,y)
yhat <- predict(lm)
yhat <- predict(fit6)
plot(x, yhat)
locationtime <- read.csv("d:/cebu/locationtime.csv", sep = ';')
str(locationtime)
locationtime$X2014.01.24.09.17.04[50004779]
locationtime$X2014.01.24.09.17.04[50004778]
account <- read.csv("d:/cebu/cebu_original data/account.csv", sep = ";", header = T)
View(account)
account_new <- account[, c(1,2,9,11)]
View(account_new)
write.csv(account_new, "d:/cebu/cebu_data/account.csv", sep = ";")
write.table(account_new, "d:/cebu/cebu_data/account.csv", sep = ";")
library(lubridate)  # For year() function below
library(forecast)
dat = read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
tstest = ts(testing$visitsTumblr)
fit <- bats(tstrain)
fcast <- forecast(fit)
fcast <- forecast(fit, length(tstest))
testing$visitsTumblr
a <- (testing$visitsTumblr < fcast$upper[,2])
b <- (testing$visitsTumblr > fcast$lower[,2])
a && b
a & b
accuracy(fcast, testing$visitsTumblr)
acc <- (testing$visitsTumblr < fcast$upper[,2]) & (testing$visitsTumblr > fcast$lower[,2])
sum(acc)/435
sum(acc)/235
library(e1071)
set.seed(325)
fit <- svm(CompressiveStrength ~., data = training)
set.seed(3523)
library(AppliedPredictiveModeling)
library(e1071)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
fit <- svm(CompressiveStrength ~., data = training)
set.seed(3523)
library(AppliedPredictiveModeling)
library(e1071)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(3523)
library(AppliedPredictiveModeling)
library(e1071)
library(caret)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
fit <- svm(CompressiveStrength ~., data = training)
pre <- predict(fit, testing)
summary(pre)
pre
sqrt(sum(pre-testing)^2)
sqrt(sum((pre-testing)^2))
sqrt(sum((pre-testing)^2))/length(pre)
sqrt(sum((pre-testing)^2)/length(pre))
a <- (pre-testing)^2
plot(pre, testing)
rmse <- sqrt(sum((pre-testing$CompressiveStrength)^2)/length(pre))
set.seed(325)
fit <- svm(CompressiveStrength ~., data = training)
pre <- predict(fit, testing)
rmse <- sqrt(sum((pre-testing$CompressiveStrength)^2)/length(pre))
set.seed(3523)
library(AppliedPredictiveModeling)
library(e1071)
library(caret)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
fit <- svm(CompressiveStrength ~., data = training)
pre <- predict(fit, testing)
rmse <- sqrt(sum((pre-testing$CompressiveStrength)^2)/length(pre))
setwd("Practical Machine Learning/MachingLearningProject/")
training <- read.csv("./pml-training.csv", na.strings = c("", "NA"))
testing <- read.csv("./pml-testing.csv", na.strings = c("", "NA"))
a <- nrow(training)
b <- sample(1:a, round(0.2*a))
summary(b)
library(caret)
library(randomForest)
#Find the columns with a lot of NAs
na_indx <- which(sapply(training, function(y) sum(is.na(y)) > 0))
train_new <- training[, -c(na_indx, 1:7)]
set.seed(1234)
sample_indx <- sample(1:nrow(training), round(0.2*nrow(training)))
fit <- train(classe ~., data = train_new[-sample_indx,], method = "glm")
fit <- randomForest(classe ~., data = train_new[-sample_indx,])
pre_train <- predict(fit, train_new[-sample_indx,])
pre_test <- predict(fit, train_new[sample_indx, ])
acc_train <- sum(pre_train == train_new[-sample_indx,]$classe)/nrow(train_new[-sample_indx,])
acc_test <- sum(pre_test == train_new[sample_indx, ]$classe)/nrow(train_new[sample_indx, ])
fit$confusion
um(pre_train == train_new[-sample_indx,]$classe)
sum(pre_train == train_new[-sample_indx,]$classe)
table(pre_test, train_new[sample_indx, ]$classe)
nrow(train_new[-sample_indx,])
sum(pre_train == train_new[-sample_indx,]$classe)
sum(fit$predicted == train_new[-sample_indx,]$classe)
acc_train <- sum(fit$predicted == train_new[-sample_indx,]$classe)/nrow(train_new[-sample_indx,])
gettree(fit)
fit <- randomForest(classe ~., data = train_new[-sample_indx,], ntree=100)
pre_test <- predict(fit, train_new[sample_indx, ])
fit$confusion
table(pre_test, train_new[sample_indx, ]$classe)
acc_train <- sum(fit$predicted == train_new[-sample_indx,]$classe)/nrow(train_new[-sample_indx,])
acc_test <- sum(pre_test == train_new[sample_indx, ]$classe)/nrow(train_new[sample_indx, ])
fit <- randomForest(classe ~., data = train_new[-sample_indx,], ntree=10)
pre_test <- predict(fit, train_new[sample_indx, ])
fit$confusion
table(pre_test, train_new[sample_indx, ]$classe)
acc_train <- sum(fit$predicted == train_new[-sample_indx,]$classe)/nrow(train_new[-sample_indx,])
acc_test <- sum(pre_test == train_new[sample_indx, ]$classe)/nrow(train_new[sample_indx, ])
sum(fit$predicted == train_new[-sample_indx,]$classe)
pre_train <- predict(fit, train_new[-sample_indx, ])
sum(pre_train == train_new[-sample_indx,]$classe)
nrow(train_new[sample_indx, ])
nrow(train_new[-sample_indx, ])
confusionMatrix(fit)
fit$confusion
it <- randomForest(classe ~., data = train_new[-sample_indx,], ntree=10)
pre_train <- predict(fit, train_new[-sample_indx,])
pre_test <- predict(fit, train_new[sample_indx, ])
table(pre_train, train_new[-sample_indx,]$classe)
table(pre_test, train_new[sample_indx, ]$classe)
acc_train <- sum(pre_train == train_new[-sample_indx,]$classe)/nrow(train_new[-sample_indx,])
acc_test <- sum(pre_test == train_new[sample_indx, ]$classe)/nrow(train_new[sample_indx, ])
fit$importance
order(fit$importance)
fit$importance[order(fit$importance)]
getTree(fit)
library(rattle)
fancyRpartPlot(fit)
plot(fit)
fit <- randomForest(classe ~., data = train_new[-sample_indx,], ntree=20)
plot(fit)
fit <- randomForest(classe ~., data = train_new[-sample_indx,], ntree=50)
plot(fit)
library(ggplot2)
plot(pre_test)
plot(pre_test, train_new[sample_indx, ]$classe))
plot(pre_test, train_new[sample_indx, ]$classe)
fit <- randomForest(classe ~., data = train_new[-sample_indx,], ntree=30)
plot(fit)
fit <- randomForest(classe ~., data = train_new, ntree=20)
table(pre, train_new$classe)
pre <- predict(fit, train_new)
acc <- sum(pre_train == train_new$classe)/nrow(train_new)
table(pre, train_new$classe)
fit$confusion
acc <- sum(pre == train_new$classe)/nrow(train_new)
pre_test <- predict(fit, testing)
pre_t <- predict(fit, testing)
pre_t
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(pre_t)
